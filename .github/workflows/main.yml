name: Purge Secrets on PR

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  issues: write
  actions: write
  pull-requests: write

jobs:
  purge-secrets:
    runs-on: ubuntu-latest
    env:
      REPO_NAME: ${{ github.repository }}
      BACKUP_DIR: backup-$REPO_NAME
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}

    steps:
      - name: Checkout repo with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Clone repo with all refs
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git clone https://$PAT_TOKEN@github.com/${REPO_NAME}.git repo.git
          cd repo.git
          
          # Fetch all references
          git fetch --all --tags --prune
          git remote set-url origin https://$PAT_TOKEN@github.com/${{ github.repository }}.git
          
          echo "‚úÖ Private repository cloned successfully"

      - name: Convert bare repo to working
        run: |
          echo "üì§ Preparing pull requests for cleaned branches..."
          cd repo.git
          
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Convert from bare to working repo
          git config --bool core.bare false
          git reset --hard
          git clean -fd


      - name: Create Archive Backups for Remote Branches
        run: |
          echo "üì¶ Creating archive backups for all remote-tracking branches..."
          cd repo.git
          mkdir -p "../$BACKUP_DIR"
      
          # List all remote branches except HEAD and pull/refs
          for branch in $(git branch -r | grep -vE 'HEAD|pull/'); do
            local_branch="${branch#origin/}"
            archive_name="branch_${local_branch//\//_}.tar.gz"
      
            echo "üì¶ Archiving $branch -> $archive_name"
            git archive "$branch" --format=tar.gz --output="../$BACKUP_DIR/$archive_name"
          done
      
          echo "‚úÖ Branch archive backups created in $BACKUP_DIR"
      
      - name: Create Archive Backups for Tags
        run: |
          echo "üè∑Ô∏è Creating archive backups for tags..."
          cd repo.git
      
          for tag in $(git tag); do
            archive_name="tag_${tag//\//_}.tar.gz"
            echo "üè∑Ô∏è Archiving tag: $tag -> $archive_name"
            git archive "$tag" --format=tar.gz --output="../$BACKUP_DIR/$archive_name"
          done
      
          echo "‚úÖ Tag archive backups created in $BACKUP_DIR"

      - name: Install git-filter-repo
        run: |
          echo "üîß Setting up cleanup environment..."
          sudo apt-get update
          sudo apt-get install -y openjdk-11-jre-headless python3-pip
          
          # Install BFG Repo Cleaner
          wget https://repo1.maven.org/maven2/com/madgag/bfg/1.14.0/bfg-1.14.0.jar
          chmod +x bfg-1.14.0.jar
          sudo mv bfg-1.14.0.jar /usr/local/bin/bfg.jar
          echo '#!/bin/bash' | sudo tee /usr/local/bin/bfg
          echo 'java -jar /usr/local/bin/bfg.jar "$@"' | sudo tee -a /usr/local/bin/bfg
          sudo chmod +x /usr/local/bin/bfg
          
          # Install git-filter-repo as backup
          pip3 install git-filter-repo

      - name: Copy secrets pattern file
        run: |
          cp .github/secrets-patterns.txt ./secrets-patterns.txt

      - name: Clean branches & create PRs
        run: |
          cd repo.git

          for branch in $(git branch -r | grep -vE 'origin/HEAD|origin/cleanup/' | sed 's|origin/||'); do
            CLEAN_BRANCH="cleanup/${branch//\//_}"

            echo "üîß Checking out $branch"
            git checkout -B "$CLEAN_BRANCH" "origin/$branch"

            echo "üßπ Running BFG cleanup..."
            bfg --replace-text ./secrets-patterns.txt --no-blob-protection .

            echo "üì¶ Checking for detected secrets..."
            SECRET_COUNT=$(git log -p | grep -c -f ../secrets-patterns.txt || true)

            if [[ "$SECRET_COUNT" -eq 0 ]]; then
              echo "‚ÑπÔ∏è No secrets found in $branch ‚Äî skipping."
              continue
            fi

            if git diff --quiet; then
              echo "‚ÑπÔ∏è No changes detected ‚Äî skipping."
              continue
            fi

            echo "üßπ Finalizing cleanup"
            git reflog expire --expire=now --all
            git gc --prune=now --aggressive

            echo "üì§ Pushing $CLEAN_BRANCH"
            git push origin "$CLEAN_BRANCH"

            echo "üîç Checking for existing PR"
            PR_EXISTS=$(curl -s -H "Authorization: token $PAT_TOKEN" \
              "https://api.github.com/repos/$REPO_NAME/pulls?head=datatest067:${CLEAN_BRANCH}&base=${branch}" \
              | jq '. | length')

            if [[ "$PR_EXISTS" -gt 0 ]]; then
              echo "üö´ PR already exists for $branch ‚Äî skipping."
              continue
            fi

            echo "üì¨ Creating PR for $branch"
            pr_body=$(jq -n \
              --arg title "[SECRETS-CLEANUP] $branch" \
              --arg head "$CLEAN_BRANCH" \
              --arg base "$branch" \
              --arg body "This pull request contains automated secrets cleanup for **$branch**.\n\nPlease verify." \
              '{
                title: $title,
                head: $head,
                base: $base,
                body: $body,
                labels: ["security", "automated-cleanup"]
              }')

            response=$(curl -s -w "%{http_code}" -o response.json -X POST \
              -H "Authorization: token $PAT_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/$REPO_NAME/pulls \
              -d "$pr_body")

            if [[ "$response" != "201" ]]; then
              echo "‚ùå Failed to create PR for $branch (HTTP $response)"
              cat response.json
              exit 1
            else
              echo "‚úÖ PR created for $branch"
            fi

            git reset --hard
            git clean -fd

          done
