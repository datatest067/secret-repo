name: Repository Secrets Cleanup

on:
  pull_request:
    types: [opened, edited, reopened]

permissions:
  contents: write
  issues: write
  actions: write
  pull-requests: write

jobs:
  validate-request:
    if: contains(github.event.pull_request.labels.*.name, '***REMOVED***s-cleanup')
    runs-on: ubuntu-latest
    outputs:
      should_proceed: ${{ steps.validation.outputs.proceed }}
      repository_name: ${{ steps.validation.outputs.repo_name }}
    steps:
      - name: Validate PR Format
        id: validation
        run: |
          echo "Validating pull request format..."
          TITLE="${{ github.event.pull_request.title }}"
          BODY="${{ github.event.pull_request.body }}"

          if [[ "$TITLE" =~ ^\[SECRETS-CLEANUP\] ]]; then
            echo "‚úÖ Title format is valid"
            REPO_NAME=$(echo "$TITLE" | sed 's/\[SECRETS-CLEANUP\] //')
            echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT

            if [[ "$BODY" == *"Please clean repository history of ***REMOVED***s and sensitive data"* ]]; then
              echo "‚úÖ Body format is valid"
              echo "proceed=true" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Body doesn't match expected format"
              echo "proceed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ùå Title doesn't match expected format"
            echo "proceed=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment on Pull Request - Validation Result
        uses: actions/github-script@v7
        with:
          github-***REMOVED***: ${{ ***REMOVED***s.PAT_TOKEN }}
          script: |
            const proceed = '${{ steps.validation.outputs.proceed }}';
            const repoName = '${{ steps.validation.outputs.repo_name }}';
            const prNumber = context.payload.pull_request.number;

            const body = proceed === 'true' ? `## üîç Validation Successful

‚ö†Ô∏è **CRITICAL WARNING**: This operation will:
- Rewrite the entire Git history
- Force push to all branches and tags
- Potentially break existing workflows
- Require all collaborators to re-clone

The cleanup process will begin automatically. Please ensure all team members are notified.` : `## ‚ùå Validation Failed

Please ensure your pull request follows this exact format:

**Title:** \`[SECRETS-CLEANUP] Your Repository Name\`
**Labels:** \`***REMOVED***s-cleanup\`
**Body:** \`Please clean repository history of ***REMOVED***s and sensitive data\`

Please update your PR and try again.`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body
            });

  clean-repository:
    needs: validate-request
    if: needs.validate-request.outputs.should_proceed == 'true'
    runs-on: ubuntu-latest
    env:
      REPO_NAME: ${{ needs.validate-request.outputs.repository_name }}
      BACKUP_DIR: backup-${{ github.run_number }}-$(date +%Y%m%d)
      PAT_TOKEN: ${{ ***REMOVED***s.PAT_TOKEN }}
    steps:
      - name: Validate PAT Token
        run: |
          if [ -z "$PAT_TOKEN" ]; then
            echo "‚ùå PAT_TOKEN ***REMOVED*** is not configured"
            exit 1
          fi

          RESPONSE=$(curl -s -H "Authorization: ***REMOVED*** $PAT_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}")

          if echo "$RESPONSE" | grep -q '"private": true'; then
            echo "‚úÖ PAT ***REMOVED*** has access to private repository"
          else
            echo "‚ùå PAT ***REMOVED*** may not have sufficient permissions"
            exit 1
          fi

      - name: Setup Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-11-jre-headless python3-pip
          wget https://repo1.maven.org/maven2/com/madgag/bfg/1.14.0/bfg-1.14.0.jar
          chmod +x bfg-1.14.0.jar
          sudo mv bfg-1.14.0.jar /usr/local/bin/bfg.jar
          echo '#!/bin/bash' | sudo tee /usr/local/bin/bfg
          echo 'java -jar /usr/local/bin/bfg.jar "$@"' | sudo tee -a /usr/local/bin/bfg
          sudo chmod +x /usr/local/bin/bfg
          pip3 install git-filter-repo

      - name: Clone Private Repository
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git clone --mirror https://$PAT_TOKEN@github.com/${{ github.repository }}.git repo.git
          cd repo.git
          git fetch --all --tags --prune
          git remote set-url origin https://$PAT_TOKEN@github.com/${{ github.repository }}.git

      - name: Create Comprehensive Backup
        run: |
          mkdir -p $BACKUP_DIR
          cd repo.git
          git bundle create ../$BACKUP_DIR/complete-backup.bundle --all
          git bundle verify ../$BACKUP_DIR/complete-backup.bundle
          for branch in $(git branch -r | grep -v HEAD | sed 's/origin\///'); do
            git archive $branch --format=tar.gz --output="../$BACKUP_DIR/branch_${branch//\//_}.tar.gz"
          done
          for tag in $(git tag); do
            git archive $tag --format=tar.gz --output="../$BACKUP_DIR/tag_${tag}.tar.gz"
          done
          git log --all --oneline > ../$BACKUP_DIR/commit-history.txt
          git branch -a > ../$BACKUP_DIR/branches.txt
          git tag -l > ../$BACKUP_DIR/tags.txt
          git remote -v > ../$BACKUP_DIR/remotes.txt
          echo "Repository: ${{ github.repository }}" > ../$BACKUP_DIR/repo-info.txt
          echo "Private: true" >> ../$BACKUP_DIR/repo-info.txt
          echo "Backup Date: $(date)" >> ../$BACKUP_DIR/repo-info.txt

      - name: Pre-cleanup Analysis
        run: |
          cd repo.git
          echo "# Pre-cleanup Analysis Report" > ../analysis-report.md
          echo "Repository: ${{ github.repository }} (Private)" >> ../analysis-report.md
          echo "Generated: $(date)" >> ../analysis-report.md
          echo "## Potential Secrets Found:" >> ../analysis-report.md
          git log --all --grep="***REMOVED***" --oneline | wc -l | xargs echo "Password mentions:" >> ../analysis-report.md
          git log --all --grep="***REMOVED***" --oneline | wc -l | xargs echo "Secret mentions:" >> ../analysis-report.md
          git log --all --grep="key" --oneline | wc -l | xargs echo "Key mentions:" >> ../analysis-report.md
          git log --all --grep="***REMOVED***" --oneline | wc -l | xargs echo "Token mentions:" >> ../analysis-report.md
          git log --all --name-only --pretty=format: | sort -u | grep -E '\.(env|key|pem|p12|pfx|jks)$' | wc -l | xargs echo "Suspicious files:" >> ../analysis-report.md
          du -sh . | cut -f1 | xargs echo "Repository size before cleanup:" >> ../analysis-report.md

      - name: Remove Secrets with BFG
        run: |
          cd repo.git
          bfg --replace-text ../***REMOVED***s-patterns.txt --no-blob-protection .

      - name: Alternative Cleanup with git-filter-repo
        if: failure()
        run: |
          cd repo.git
          git config --bool core.bare false
          git reset --hard
          git filter-repo --path-glob '***REMOVED***' --invert-paths --force
          git filter-repo --path-glob '***REMOVED***' --invert-paths --force
          git filter-repo --path-glob '***REMOVED***' --invert-paths --force

      - name: Clean and Optimize Repository
        run: |
          cd repo.git
          git reflog expire --expire=now --all
          git gc --prune=now --aggressive
          git fsck --unreachable
          git prune --expire=now

      - name: Validate Cleanup Results
        run: |
          cd repo.git
          echo "# Post-cleanup Validation Report" > ../validation-report.md
          echo "Repository: ${{ github.repository }} (Private)" >> ../validation-report.md
          echo "Generated: $(date)" >> ../validation-report.md
          REMAINING_SECRETS=0
          git log --all --grep="***REMOVED***\|***REMOVED***\|key\|***REMOVED***" --oneline | wc -l | xargs echo "Commits with potential ***REMOVED***s:" >> ../validation-report.md
          du -sh . | cut -f1 | xargs echo "Current repository size:" >> ../validation-report.md

      - name: Push Cleaned Repository
        run: |
          cd repo.git
          git remote set-url origin https://$PAT_TOKEN@github.com/${{ github.repository }}.git
          git push --force --all
          git push --force --tags

      - name: Upload Backup and Reports
        uses: actions/upload-artifact@v4
        with:
          name: cleanup-backup-and-reports-${{ github.run_number }}
          path: |
            ${{ env.BACKUP_DIR }}/
            analysis-report.md
            validation-report.md
          retention-days: 30

      - name: Comment Results on PR
        uses: actions/github-script@v7
        with:
          github-***REMOVED***: ${{ ***REMOVED***s.PAT_TOKEN }}
          script: |
            const fs = require('fs');
            const status = process***REMOVED***.status || 'success';
            const analysisReport = fs.readFileSync('analysis-report.md', 'utf8');
            const validationReport = fs.readFileSync('validation-report.md', 'utf8');
            const statusEmoji = status === 'success' ? '‚úÖ' : '‚ö†Ô∏è';
            const statusText = status === 'success' ? 'Success' : 'Completed with Warnings';
            const prNumber = context.payload.pull_request.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `## ${statusEmoji} Secrets Cleanup ${statusText}

**Repository:** ${{ env.REPO_NAME }}

### üìä Analysis Report
\`\`\`
${analysisReport}
\`\`\`

### ‚úÖ Validation Report
\`\`\`
${validationReport}
\`\`\`

Artifacts uploaded: cleanup-backup-and-reports-${{ github.run_number }} (30 days retention)`
            });

  cleanup-on-failure:
    needs: [validate-request, clean-repository]
    if: failure() && needs.validate-request.outputs.should_proceed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Failure Notification
        uses: actions/github-script@v7
        with:
          github-***REMOVED***: ${{ ***REMOVED***s.PAT_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `## ‚ùå Secrets Cleanup Failed

The ***REMOVED***s cleanup process encountered an error and was aborted. Please check the logs.`
            });
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              labels: ['cleanup-failed']
            });
