name: Purge Secrets on PR

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  purge-***REMOVED***s:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository (all history, all refs)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Create comprehensive backup
        run: |
          set -e
          BACKUP_TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BACKUP_NAME="repo-backup-${BACKUP_TIMESTAMP}"
          WORKDIR="/tmp/${BACKUP_NAME}"
          
          echo "Creating backup at $WORKDIR"
          mkdir -p "$WORKDIR"
      
          # Save full git bundle (all branches and tags)
          echo "Saving full git bundle (includes all branches/tags)..."
          git bundle create "$WORKDIR/${BACKUP_NAME}.bundle" --all
      
          # Copy working directory (excluding .git and bundle)
          echo "Copying working directory to $WORKDIR/repo-contents"
          rsync -av --exclude='.git' --exclude='*.bundle' ./ "$WORKDIR/repo-contents"
      
          # Create compressed tar archive
          echo "Creating compressed tar archive..."
          tar -czf "$WORKDIR/${BACKUP_NAME}.tar.gz" -C "$WORKDIR" repo-contents
      
          echo "Backup content:"
          ls -lh "$WORKDIR"
      
          echo "Creating GitHub release..."
          gh release create "backup-${BACKUP_TIMESTAMP}" \
            "$WORKDIR/${BACKUP_NAME}.bundle" \
            "$WORKDIR/${BACKUP_NAME}.tar.gz" \
            --repo "${GITHUB_REPOSITORY}" \
            --title "Pre-purge backup - ${BACKUP_TIMESTAMP}" \
            --notes "Complete backup before purging git history. Includes full bundle and file snapshot."
      
          echo "Backup completed successfully: backup-${BACKUP_TIMESTAMP}"
        env:
          ***REMOVED***: ${{ ***REMOVED***s.MY_SECRET }}


      - name: Install git-filter-repo
        run: |
          pip install git-filter-repo
          sudo apt-get install ripgrep

      - name: Clean working directory
        run: |
          git clean -xfd
          
      - name: Auto-detect and remove hardcoded ***REMOVED***s
        run: |
          # Create a script to detect and remove hardcoded ***REMOVED***s
          cat > detect_***REMOVED***s.sh << 'EOF'
          #!/bin/bash
          
          # Initialize replacements file
          echo "# Auto-generated replacements for hardcoded ***REMOVED***s" > replacements.txt
          
          # Function to add replacement if ***REMOVED*** is found
          add_replacement() {
            local pattern="$1"
            local replacement="$2"
            local description="$3"
            
            if git rev-list --all | xargs git grep -l "$pattern" >/dev/null 2>&1; then
              echo "Found: $description"
              echo "$pattern==>$replacement" >> replacements.txt
            fi
          }
          
          # Common JWT ***REMOVED***s
          add_replacement "your-***REMOVED***-key" "" "JWT ***REMOVED*** key"
          add_replacement "your-super-***REMOVED***-jwt-key-change-this-in-production" "" "JWT super ***REMOVED***"
          add_replacement "your-jwt-***REMOVED***" "" "JWT ***REMOVED***"
          add_replacement "jwt-***REMOVED***" "" "JWT ***REMOVED***"
          
          ***REMOVED***
          add_replacement "your-access-key" "" "AWS access key"
          add_replacement "your-***REMOVED***-key" "" "AWS ***REMOVED*** key"
          add_replacement "AKIA[0-9A-Z]{16}" "" "AWS access key ID"
          add_replacement "aws_access_key_id" "" "AWS access key variable"
          add_replacement "aws_***REMOVED***_access_key" "" "AWS ***REMOVED*** key variable"
          
          # Database connection strings
          add_replacement "mongodb://[^@]*@[^[:space:]]*" "" "MongoDB connection string with ***REMOVED***"
          add_replacement "mongodb\+srv://[^@]*@[^[:space:]]*" "" "MongoDB SRV connection string with ***REMOVED***"
          add_replacement "postgresql://[^@]*@[^[:space:]]*" "" "PostgreSQL connection string with ***REMOVED***"
          add_replacement "mysql://[^@]*@[^[:space:]]*" "" "MySQL connection string with ***REMOVED***"
          
          ***REMOVED***
          add_replacement "***REMOVED***.*=.*['\"][^'\"]*['\"]" "" "API key assignment"
          add_replacement "***REMOVED***.*=.*['\"][^'\"]*['\"]" "" "Token assignment"
          add_replacement "***REMOVED***.*=.*['\"][^'\"]*['\"]" "" "Secret assignment"
          
          # Common ***REMOVED*** patterns
          add_replacement "***REMOVED***.*=.*['\"][^'\"]*['\"]" "" "Password assignment"
          add_replacement "passwd.*=.*['\"][^'\"]*['\"]" "" "Password variable"
          
          # Private keys
          add_replacement "-----BEGIN PRIVATE KEY-----" "" "Private key start"
          add_replacement "-----BEGIN RSA PRIVATE KEY-----" "" "RSA private key start"
          add_replacement "-----BEGIN OPENSSH PRIVATE KEY-----" "" "OpenSSH private key start"
          
          # OAuth and OIDC ***REMOVED***s
          add_replacement "client_***REMOVED***.*=.*['\"][^'\"]*['\"]" "" "OAuth client ***REMOVED***"
          add_replacement "client_***REMOVED***_key.*=.*['\"][^'\"]*['\"]" "" "OAuth client ***REMOVED*** key"
          
          # Docker and container ***REMOVED***s
          add_replacement "docker_***REMOVED***.*=.*['\"][^'\"]*['\"]" "" "Docker ***REMOVED***"
          add_replacement "registry_***REMOVED***.*=.*['\"][^'\"]*['\"]" "" "Registry ***REMOVED***"
          
          echo "Secret detection complete. Found ***REMOVED***s:"
          if [ -s replacements.txt ]; then
            cat replacements.txt
          else
            echo "No hardcoded ***REMOVED***s found."
          fi
          EOF
          
          chmod +x detect_***REMOVED***s.sh
          ./detect_***REMOVED***s.sh

      - name: Remove detected ***REMOVED***s from history
        run: |
          if [ -s replacements.txt ]; then
            echo "Removing detected ***REMOVED***s from all history..."
            git filter-repo --force --replace-text replacements.txt
            echo "Secrets removed successfully."
          else
            echo "No ***REMOVED***s detected to remove."
          fi

      - name: Set remote URL
        run: |
          git remote add origin "https://datatest067:${***REMOVED***}@github.com/datatest067/***REMOVED***-repo.git"
        env:
          ***REMOVED***: ${{ ***REMOVED***s.MY_SECRET }}
          
      - name: Configure Git
        run: |
          git config --global user.name "datatest067"
          git config --global user.email "datatest067@gmail.com"
          git remote set-url origin https://x-access-***REMOVED***:${{ ***REMOVED***s.MY_SECRET }}@github.com/${{ github.repository }}.git

      - name: Force-push all refs
        run: |
          git push --force --all
          git push --force --tags
        # env:
        #   ***REMOVED***: ${{ ***REMOVED***s.MY_SECRET }}

      - name: Validate cleaned repository
        run: |
          # Check that actual ***REMOVED***s have been removed (not echo statements or replacement text)
          echo "Validating that actual ***REMOVED***s have been removed..."
          
          # Create a more precise validation script
          cat > validate_***REMOVED***s.sh << 'EOF'
          #!/bin/bash
          
          echo "Checking for remaining actual ***REMOVED***s..."
          
          # Function to check for actual ***REMOVED*** patterns
          check_***REMOVED***_pattern() {
            local pattern="$1"
            local description="$2"
            
            # Search for the pattern but exclude common false positives
            local results=$(git rev-list --all | xargs git grep -l "$pattern" 2>/dev/null || true)
            
            if [ -n "$results" ]; then
              # Filter out false positives
              local filtered_results=$(echo "$results" | grep -v "REDACTED_SECRET" | grep -v "echo.*Hardcoded" | grep -v "==>" | grep -v "replacement" | grep -v "validation" || true)
              
              if [ -n "$filtered_results" ]; then
                echo "WARNING: Found potential $description in:"
                echo "$filtered_results"
                return 1
              fi
            fi
            return 0
          }
          
          # Check for common actual ***REMOVED*** patterns
          check_***REMOVED***_pattern "***REMOVED***[[:space:]]*=[[:space:]]*['\"][A-Za-z0-9+/=_\\-]{10,}['\"]" "***REMOVED*** assignment"
          check_***REMOVED***_pattern "***REMOVED***[[:space:]]*=[[:space:]]*['\"][A-Za-z0-9+/=_\\-]{10,}['\"]" "***REMOVED*** assignment"
          check_***REMOVED***_pattern "***REMOVED***[[:space:]]*=[[:space:]]*['\"][A-Za-z0-9+/=_\\-]{10,}['\"]" "API key assignment"
          check_***REMOVED***_pattern "***REMOVED***[[:space:]]*=[[:space:]]*['\"][A-Za-z0-9+/=_\\-]{10,}['\"]" "***REMOVED*** assignment"
          check_***REMOVED***_pattern "AKIA[0-9A-Z]{16}" "AWS access key ID"
          check_***REMOVED***_pattern "mongodb://[^@]*@[^[:space:]]*" "MongoDB connection with ***REMOVED***"
          check_***REMOVED***_pattern "your-***REMOVED***-key" "JWT ***REMOVED*** key"
          check_***REMOVED***_pattern "your-super-***REMOVED***" "JWT super ***REMOVED***"
          
          echo "Validation complete - no actual ***REMOVED***s found."
          EOF
          
          chmod +x validate_***REMOVED***s.sh
          ./validate_***REMOVED***s.sh

      - name: Comment on PR
        run: |
          if [ -s replacements.txt ]; then
            SECRET_COUNT=$(grep -c "==>" replacements.txt || echo "0")
            gh pr comment ${{ github.event.pull_request.number }} --body "Purge complete! Removed $SECRET_COUNT hardcoded ***REMOVED***s from repository history. Backup created as a release. Please verify the repository."
          else
            gh pr comment ${{ github.event.pull_request.number }} --body "No hardcoded ***REMOVED***s detected in repository. Repository is clean."
          fi
        env:
          ***REMOVED***: ${{ ***REMOVED***s.MY_SECRET }}
