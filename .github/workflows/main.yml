name: Purge Secrets on PR

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  purge-secrets:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository (all history, all refs)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Backup repository (all refs)
        run: |
          git bundle create repo-backup.bundle --all
          gh release create "backup-$(date +%Y%m%d%H%M%S)" repo-backup.bundle --title "Pre-purge backup"
        env:
          GITHUB_TOKEN: ${{ secrets.MY_SECRET }}

      - name: Install git-filter-repo
        run: |
          pip install git-filter-repo
          sudo apt-get install ripgrep

      - name: Find potential secrets in history
        run: |
          mkdir -p .secret-scan
          
          for commit in $(git rev-list --all); do
            git checkout "$commit" --quiet || continue
            rg --no-filename --no-line-number -i -e "\(***REMOVED***\|secret\|api[_-]\?key\|token\)[[:space:]:=]\+['\"]\?[A-Za-z0-9_-]\{6,\}['\"]\?" . >> .secret-scan/matches.txt || true
          done
          
          sort -u .secret-scan/matches.txt > .secret-scan/unique.txt || true
          
          echo "Generating replacements.txt..."
          
          if [[ -s .secret-scan/unique.txt ]]; then
            > replacements.txt
            while IFS= read -r secret; do
              trimmed=$(echo "$secret" | sed -E "s/.*['\"]?([A-Za-z0-9_-]{6,})['\"]?.*/\1/")
              echo "$trimmed==>REDACTED_SECRET" >> replacements.txt
            done < .secret-scan/unique.txt
          
            echo "Secrets to be removed:"
            cat replacements.txt
          else
            echo "✅ No secrets detected — skipping replacement."
            touch replacements.txt  # Create empty file to avoid filter-repo failure
          fi


          
      # - name: Clean working directory
      #   run: |
      #     git clean -xfd
  
      - name: Clean repository
        run: |
          git filter-repo --force --replace-text replacements.txt

      # - name: Run git-filter-repo
      #   if: success() && hashFiles('replacements.txt') != ''
      #   run: |
      #     git filter-repo --force --replace-text replacements.txt

      - name: Set remote URL
        run: |
          git remote add origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
        env:
          GITHUB_TOKEN: ${{ secrets.MY_SECRET }}

      - name: Force-push all refs
        run: |
          git push --force --all
          git push --force --tags

      - name: Validate cleanup
        run: |
          if git rev-list --all | xargs git grep -i -E "(***REMOVED***|token|api[_-]?key)[[:space:]]*[:=][[:space:]]*['\"]?[A-Za-z0-9+/=_\\-]{10,}['\"]?"; then
            echo "Secrets still found!" && exit 1
          else
            echo "Secrets successfully purged."
          fi



      - name: Comment on PR
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "Purge complete. Backup created as a release. Please verify the repository. All branches and tags were processed."
        env:
          GITHUB_TOKEN: ${{ secrets.MY_SECRET }}
