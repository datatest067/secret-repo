name: Purge Secrets on PR

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  issues: write
  actions: write
  pull-requests: write

jobs:
  purge-secrets:
    runs-on: ubuntu-latest
    env:
      REPO_NAME: ${{ github.repository }}
      BACKUP_DIR: backup-${{ github.repository }}
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}

    steps:
      - name: Checkout repository (all history, all refs)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Clone Private Repository
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git clone https://$PAT_TOKEN@github.com/${{ github.repository }}.git repo.git
          cd repo.git
          git fetch --all --tags --prune
          git remote set-url origin https://$PAT_TOKEN@github.com/${{ github.repository }}.git

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-11-jre-headless jq
          wget https://repo1.maven.org/maven2/com/madgag/bfg/1.14.0/bfg-1.14.0.jar
          chmod +x bfg-1.14.0.jar && sudo mv bfg-1.14.0.jar /usr/local/bin/bfg.jar
          echo '#!/bin/bash' | sudo tee /usr/local/bin/bfg
          echo 'java -jar /usr/local/bin/bfg.jar "$@"' | sudo tee -a /usr/local/bin/bfg
          sudo chmod +x /usr/local/bin/bfg

      - name: Check for existing GitHub secret scanning alerts
        run: |
          echo "üîç Fetching existing secret scanning alerts from GitHub..."

          curl -s -H "Authorization: token $PAT_TOKEN" \
               -H "Accept: application/vnd.github+json" \
               "https://api.github.com/repos/${REPO_NAME}/secret-scanning/alerts" > alerts.json

          if jq -e 'type == "array"' alerts.json > /dev/null; then
            COUNT=$(jq '. | length' alerts.json)
            if [[ "$COUNT" -gt 0 ]]; then
              echo "üö® Found $COUNT existing secret scanning alerts!"
              jq '.[] | {secret_type, state, location}' alerts.json | tee ../secret.txt
            else
              echo "‚úÖ No existing secret scanning alerts found."
              echo "No secrets detected via GitHub secret scanning API." > ../secret.txt
            fi
          else
            echo "‚ö†Ô∏è Unexpected response from GitHub API:"
            cat alerts.json
            echo "No valid secret scanning alerts found." > ../secret.txt
          fi

      - name: Use patterns from file and purge
        run: |
          cd repo.git
          git config --bool core.bare false
          git reset --hard
          git clean -fd

          for branch in $(git branch -r | grep -vE 'origin/HEAD|origin/cleanup/' | sed 's|origin/||'); do
            CLEAN_BRANCH="cleanup/${branch//\//_}"

            git restore .github/workflows/main.yml || true
            git reset --hard
            git clean -fd

            echo "üîß Checking out branch: $branch"
            git checkout -B "$CLEAN_BRANCH" "origin/$branch"

            echo "üßπ Running BFG with external patterns"
            bfg --replace-text ../secrets-patterns.txt --no-blob-protection .

            echo "üì¶ Checking for detected secrets..."
            SECRET_COUNT=$(git log -p | grep -c -f ../secrets-patterns.txt || true)

            if [[ "$SECRET_COUNT" -eq 0 ]]; then
              echo "‚ÑπÔ∏è No secrets found in $branch ‚Äî skipping push & PR."
              continue
            fi

            if git diff --quiet; then
              echo "‚ÑπÔ∏è No changes detected after cleanup ‚Äî skipping push & PR."
              continue
            fi

            echo "üßπ Finalizing cleanup with git GC"
            git reflog expire --expire=now --all
            git gc --prune=now --aggressive

            echo "üì§ Pushing cleaned branch: $CLEAN_BRANCH"
            git push origin "$CLEAN_BRANCH"

            echo "üîç Checking if PR already exists"
            PR_EXISTS=$(curl -s -H "Authorization: token $PAT_TOKEN" \
              "https://api.github.com/repos/${REPO_NAME}/pulls?head=datatest067:${CLEAN_BRANCH}&base=${branch}" | jq '. | length')

            if [[ "$PR_EXISTS" -gt 0 ]]; then
              echo "üö´ PR already exists for $branch ‚Äî skipping."
              continue
            fi

            echo "üì¨ Creating PR for $branch"
            pr_body=$(jq -n \
              --arg title "[SECRETS-CLEANUP] $branch" \
              --arg head "$CLEAN_BRANCH" \
              --arg base "$branch" \
              --arg body "This pull request contains automated secrets cleanup for branch **$branch**.\n\nPlease review changes carefully.\n\n---\n\nGenerated by GitHub Actions." \
              '{title: $title, head: $head, base: $base, body: $body, labels: ["security", "automated-cleanup"]}')

            response=$(curl -s -w "%{http_code}" -o response.json -X POST \
              -H "Authorization: token $PAT_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/$REPO_NAME/pulls \
              -d "$pr_body")

            if [[ "$response" != "201" ]]; then
              echo "‚ùå Failed to create PR for $branch (HTTP $response)"
              cat response.json
              exit 1
            else
              echo "‚úÖ PR created for $branch"
            fi

            echo "üßº Cleaning repo before next iteration"
            git reset --hard
            git clean -fd
          done
