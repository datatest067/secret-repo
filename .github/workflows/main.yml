name: Secret Removal
on:
  issues:
    types: [opened]

permissions:
  contents: write
  issues: write
  actions: write

jobs:
  secret-removal:
    runs-on: ubuntu-latest
    if: startsWith(github.event.issue.title, '[Secret-Removal]')
    env:
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      TEMP_DIR: /tmp/secret-removal

    steps:
      - name: Parse issue inputs
        id: parse
        run: |
          GH_REPO="secret-repo"
          GH_ORG="datatest067"
          echo "gh_repo=$GH_REPO" >> $GITHUB_OUTPUT
          echo "gh_org=$GH_ORG" >> $GITHUB_OUTPUT
          mkdir -p $TEMP_DIR/artifacts

      - name: Disable branch protection
        run: |
          echo "$PAT_TOKEN" | gh auth login --with-token
          DEFAULT_BRANCH=$(gh api /repos/${{ steps.parse.outputs.gh_org }}/${{ steps.parse.outputs.gh_repo }} | jq -r .default_branch)
          gh api /repos/${{ steps.parse.outputs.gh_org }}/${{ steps.parse.outputs.gh_repo }}/branches/$DEFAULT_BRANCH/protection > $TEMP_DIR/branch_protection.json || echo '{}' > $TEMP_DIR/branch_protection.json
          curl -s -X DELETE -H "Authorization: token $PAT_TOKEN" -H "Accept: application/vnd.github+json" https://api.github.com/repos/${{ steps.parse.outputs.gh_org }}/${{ steps.parse.outputs.gh_repo }}/branches/$DEFAULT_BRANCH/protection

      - name: Backup repository
        id: backup
        env:
          GH_REPO: ${{ steps.parse.outputs.gh_repo }}
          GH_ORG: ${{ steps.parse.outputs.gh_org }}
        run: |
          BACKUP_DIR="$TEMP_DIR/backup-${GH_REPO}/repo"
          git clone --mirror "https://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@github.com/${GH_ORG}/${GH_REPO}.git" "$BACKUP_DIR"
          rm -f "$BACKUP_DIR/config" && touch "$BACKUP_DIR/config"
          zip -r "$TEMP_DIR/artifacts/${GH_REPO}-backup.zip" "$BACKUP_DIR"
          echo "repo_mirror=$BACKUP_DIR" >> $GITHUB_OUTPUT

      - name: Upload backup
        uses: actions/upload-artifact@v4
        with:
          name: repo-backup
          path: ${{ env.TEMP_DIR }}/artifacts/${{ steps.parse.outputs.gh_repo }}-backup.zip

      - name: Install CLI & BFG
        run: |
          sudo apt update && sudo apt install gh jq openjdk-11-jre-headless -y
          wget -O $TEMP_DIR/bfg.jar https://repo1.maven.org/maven2/com/madgag/bfg/1.14.0/bfg-1.14.0.jar
          echo -e '#!/bin/bash\njava -jar '$TEMP_DIR'/bfg.jar "$@"' > /usr/local/bin/bfg && chmod +x /usr/local/bin/bfg

      - name: Fetch secret alerts
        id: fetch_alerts
        run: |
          echo "$PAT_TOKEN" | gh auth login --with-token
          mkdir -p $TEMP_DIR/reports
          gh api /repos/${{ steps.parse.outputs.gh_org }}/${{ steps.parse.outputs.gh_repo }}/secret-scanning/alerts?state=open > $TEMP_DIR/reports/alerts.json
          jq -r '.[].number' $TEMP_DIR/reports/alerts.json > $TEMP_DIR/reports/alert_numbers.txt
          jq -r '.[].secret' $TEMP_DIR/reports/alerts.json > $TEMP_DIR/reports/secrets.txt
          jq -r '.[] | "- " + .secret_type + " in " + (.location.path // "N/A")' $TEMP_DIR/reports/alerts.json > $TEMP_DIR/artifacts/secrets_report.md

      - name: Upload secrets report
        uses: actions/upload-artifact@v4
        with:
          name: secrets-report
          path: ${{ env.TEMP_DIR }}/artifacts/secrets_report.md

      - name: Redact files
        run: |
          if [ -s $TEMP_DIR/reports/alerts.json ]; then
            jq -r '.[] | select(.location != null) | .location.path + ":" + (.location.start_line | tostring)' $TEMP_DIR/reports/alerts.json > $TEMP_DIR/locations.txt
            while IFS=: read file line; do
              [ -f "$file" ] && sed -i "${line}s|.*|***REMOVED***|" "$file"
            done < $TEMP_DIR/locations.txt
            git add . && git commit -m "Redacted secrets" || echo "No changes to commit"
          fi

      - name: Run BFG
        env:
          GH_REPO: ${{ steps.parse.outputs.gh_repo }}
          REPO_MIRROR: ${{ steps.backup.outputs.repo_mirror }}
        run: |
          PATTERN_FILE="$TEMP_DIR/bfg_patterns.txt"
          echo "***REMOVED***" > "$PATTERN_FILE"
          cat "$TEMP_DIR/reports/secrets.txt" >> "$PATTERN_FILE"
          cd "$REPO_MIRROR"
          bfg --replace-text "$PATTERN_FILE" --no-blob-protection .
          git reflog expire --expire=now --all
          git gc --prune=now --aggressive

      - name: Push cleaned repo
        run: |
          cd "${{ steps.backup.outputs.repo_mirror }}"
      
          git remote remove origin || true
          git remote add origin "https://$PAT_TOKEN@github.com/${{ steps.parse.outputs.gh_org }}/${{ steps.parse.outputs.gh_repo }}.git"
      
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      
          git push origin --force --all
          git push origin --force --tags

      - name: Dismiss alerts
        run: |
          if [ -s $TEMP_DIR/reports/alert_numbers.txt ]; then
            while read alert; do
              gh api -X PATCH -f state=resolved -f resolution=revoked \
                /repos/${{ steps.parse.outputs.gh_org }}/${{ steps.parse.outputs.gh_repo }}/secret-scanning/alerts/$alert || echo "Alert $alert requires manual dismissal"
            done < $TEMP_DIR/reports/alert_numbers.txt
          fi

      - name: Restore branch protection
        run: |
          DEFAULT_BRANCH=$(gh api /repos/${{ steps.parse.outputs.gh_org }}/${{ steps.parse.outputs.gh_repo }} | jq -r .default_branch)
          [ -s $TEMP_DIR/branch_protection.json ] && curl -s -X PUT \
            -H "Authorization: token $PAT_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -d @$TEMP_DIR/branch_protection.json \
            https://api.github.com/repos/${{ steps.parse.outputs.gh_org }}/${{ steps.parse.outputs.gh_repo }}/branches/$DEFAULT_BRANCH/protection

      - name: Comment and close issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMENT="âœ… Secrets removed, repository cleaned. Backup and report are available as artifacts."
          curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
            -d "{\"body\": \"$COMMENT\"}"
          curl -s -X PATCH \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }} \
            -d '{"state": "closed"}'

      - name: Cleanup
        if: always()
        run: rm -rf $TEMP_DIR $GITHUB_WORKSPACE/*.zip
