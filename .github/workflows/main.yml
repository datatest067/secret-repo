name: Repository Secrets Cleanup

on:
  pull_request:
    types: [opened, edited, reopened]

permissions:
  contents: write
  issues: write
  actions: write
  pull-requests: write

jobs:
  validate-request:
    if: contains(github.event.pull_request.labels.*.name, '***REMOVED***s-cleanup')
    runs-on: ubuntu-latest
    outputs:
      should_proceed: ${{ steps.validation.outputs.proceed }}
      repository_name: ${{ steps.validation.outputs.repo_name }}
    steps:
      - name: Validate PR Format
        id: validation
        run: |
          echo "Validating pull request format..."
          TITLE="${{ github.event.pull_request.title }}"
          BODY="${{ github.event.pull_request.body }}"

          if [[ "$TITLE" =~ ^\[SECRETS-CLEANUP\] ]]; then
            echo "‚úÖ Title format is valid"
            REPO_NAME=$(echo "$TITLE" | sed 's/\[SECRETS-CLEANUP\] //')
            echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT

            if [[ "$BODY" == *"Please clean repository history of ***REMOVED***s and sensitive data"* ]]; then
              echo "‚úÖ Body format is valid"
              echo "proceed=true" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Body doesn't match expected format"
              echo "proceed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ùå Title doesn't match expected format"
            echo "proceed=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment on Pull Request - Validation Result
        uses: actions/github-script@v7
        with:
          github-***REMOVED***: ${{ ***REMOVED***s.PAT_TOKEN }}
          script: |
            const proceed = '${{ steps.validation.outputs.proceed }}';
            const repoName = '${{ steps.validation.outputs.repo_name }}';
            const prNumber = context.payload.pull_request.number;

            const body = proceed === 'true' ? `## üîç Validation Successful

**Repository:** ${repoName}
**Status:** Ready for cleanup

‚ö†Ô∏è **CRITICAL WARNING**: This operation will:
- Rewrite the entire Git history
- Force push to all branches and tags
- Potentially break existing workflows
- Require all collaborators to re-clone

The cleanup process will begin automatically. Please ensure all team members are notified.` : `## ‚ùå Validation Failed

Please ensure your pull request follows this exact format:

**Title:** \`[SECRETS-CLEANUP] Your Repository Name\`
**Labels:** \`***REMOVED***s-cleanup\`
**Body:** \`Please clean repository history of ***REMOVED***s and sensitive data\`

Please update your PR and try again.`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body
            });

  # Other jobs (clean-repository, cleanup-on-failure, etc.) remain the same
  # Ensure all instances of `github.event.issue` and `context.issue.number` are replaced with `github.event.pull_request` and `context.payload.pull_request.number`
  # Also update all API references from issues to pull_request where necessary
