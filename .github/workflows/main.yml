name: Purge Secrets on PR

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  purge-***REMOVED***s:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository (all history, all refs)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Backup repository (all refs)
        run: |
          git bundle create repo-backup.bundle --all
          gh release create "backup-$(date +%Y%m%d%H%M%S)" repo-backup.bundle --title "Pre-purge backup"
        env:
          ***REMOVED***: ${{ ***REMOVED***s.MY_SECRET }}

      - name: Install git-filter-repo
        run: |
          pip install git-filter-repo
          sudo apt-get install ripgrep

      - name: Find potential ***REMOVED***s in history
        run: |
          mkdir -p .***REMOVED***-scan

          git rev-list --all | xargs git grep -i -h -E "(***REMOVED***|***REMOVED***|api[_-]?key)[[:space:]]*[:=][[:space:]]*['\"]?[A-Za-z0-9+/=_\\-]{10,}['\"]?" > .***REMOVED***-scan/matches.txt || true

          sort -u .***REMOVED***-scan/matches.txt > .***REMOVED***-scan/unique.txt

          echo "Generating replacements.txt..."
          > replacements.txt
          while read -r line; do
            ***REMOVED***=$(echo "$line" | grep -oE "[A-Za-z0-9+/=_\\-]{10,}")
            if [[ -n "$***REMOVED***" ]]; then
              echo "$***REMOVED***==>REDACTED_SECRET" >> replacements.txt
            fi
          done < .***REMOVED***-scan/unique.txt

          echo "Replacement map:"
          cat replacements.txt


          
      - name: Sanitize git history
        run: |
          if [ -s replacements.txt ]; then
            git filter-repo --force --replace-text replacements.txt
          else
            echo "No ***REMOVED***s found, skipping filter-repo"
          fi
  
      # - name: Clean repository
      #   run: |
      #     git filter-repo --force --replace-text replacements.txt

      - name: Set remote URL
        run: |
          git remote add origin "https://x-access-***REMOVED***:${***REMOVED***}@github.com/${GITHUB_REPOSITORY}.git"
        env:
          ***REMOVED***: ${{ ***REMOVED***s.MY_SECRET }}

      - name: Force-push all refs
        run: |
          git push --force --all
          git push --force --tags

      - name: Validate cleanup
        run: |
          if git rev-list --all | xargs git grep -i -E "(***REMOVED***|***REMOVED***|api[_-]?key)[[:space:]]*[:=][[:space:]]*['\"]?[A-Za-z0-9+/=_\\-]{10,}['\"]?"; then
            echo "Secrets still found!" && exit 1
          else
            echo "Secrets successfully purged."
          fi

      - name: Comment on PR
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "âœ… Secrets purged from git history. Backup created as a release. Please verify."
        env:
          ***REMOVED***: ${{ ***REMOVED***s.MY_SECRET }}
