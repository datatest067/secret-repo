name: Repository Secrets Cleanup

on:
  issues:
    types: [opened, edited]

permissions:
  contents: write
  issues: write
  actions: write
  pull-requests: write

jobs:
  validate-request:
    if: contains(github.event.issue.labels.*.name, 'secrets-cleanup')
    runs-on: ubuntu-latest
    outputs:
      should_proceed: ${{ steps.validation.outputs.proceed }}
      repository_name: ${{ steps.validation.outputs.repo_name }}
    steps:
      - name: Validate Issue Format
        id: validation
        run: |
          echo "Validating issue format..."
          TITLE="${{ github.event.issue.title }}"
          BODY="${{ github.event.issue.body }}"
          
          # Check if title matches expected format
          if [[ "$TITLE" =~ ^\[SECRETS-CLEANUP\] ]]; then
            echo "✅ Title format is valid"
            REPO_NAME=$(echo "$TITLE" | sed 's/\[SECRETS-CLEANUP\] //')
            echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
            
            # Check if body contains confirmation
            if [[ "$BODY" == *"Please clean repository history of secrets and sensitive data"* ]]; then
              echo "✅ Issue body is valid"
              echo "proceed=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Issue body doesn't match expected format"
              echo "proceed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Title doesn't match expected format"
            echo "proceed=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment on Issue - Validation Result
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const proceed = '${{ steps.validation.outputs.proceed }}';
            const repoName = '${{ steps.validation.outputs.repo_name }}';
            
            if (proceed === 'true') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `## 🔍 Validation Successful
                
                **Repository:** ${repoName}
                **Status:** Ready for cleanup
                
                ⚠️ **CRITICAL WARNING**: This operation will:
                - Rewrite the entire Git history
                - Force push to all branches and tags
                - Potentially break existing workflows
                - Require all collaborators to re-clone
                
                The cleanup process will begin automatically. Please ensure all team members are notified.`
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `## ❌ Validation Failed
                
                Please ensure your issue follows this exact format:
                
                **Title:** \`[SECRETS-CLEANUP] Your Repository Name\`
                **Labels:** \`secrets-cleanup\`
                **Body:** \`Please clean repository history of secrets and sensitive data\`
                
                Please update your issue and try again.`
              });
            }

  clean-repository:
    needs: validate-request
    if: needs.validate-request.outputs.should_proceed == 'true'
    runs-on: ubuntu-latest
    env:
      REPO_NAME: ${{ needs.validate-request.outputs.repository_name }}
      BACKUP_DIR: backup-${{ github.run_number }}-$(date +%Y%m%d)
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
    steps:
      - name: Validate PAT Token
        run: |
          if [ -z "$PAT_TOKEN" ]; then
            echo "❌ PAT_TOKEN secret is not configured"
            echo "Please add your Personal Access Token as a repository secret named 'PAT_TOKEN'"
            exit 1
          fi
          
          # Test PAT token permissions
          echo "🔐 Testing PAT token permissions..."
          RESPONSE=$(curl -s -H "Authorization: token $PAT_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}")
          
          if echo "$RESPONSE" | grep -q '"private": true'; then
            echo "✅ PAT token has access to private repository"
          else
            echo "❌ PAT token may not have sufficient permissions"
            echo "Ensure your PAT has 'repo' scope for private repositories"
            exit 1
          fi

      - name: Setup Environment
        run: |
          echo "🔧 Setting up cleanup environment..."
          sudo apt-get update
          sudo apt-get install -y openjdk-11-jre-headless python3-pip
          
          # Install BFG Repo Cleaner
          wget https://repo1.maven.org/maven2/com/madgag/bfg/1.14.0/bfg-1.14.0.jar
          chmod +x bfg-1.14.0.jar
          sudo mv bfg-1.14.0.jar /usr/local/bin/bfg.jar
          echo '#!/bin/bash' | sudo tee /usr/local/bin/bfg
          echo 'java -jar /usr/local/bin/bfg.jar "$@"' | sudo tee -a /usr/local/bin/bfg
          sudo chmod +x /usr/local/bin/bfg
          
          # Install git-filter-repo as backup
          pip3 install git-filter-repo

      - name: Clone Private Repository
        run: |
          echo "📥 Cloning private repository with PAT..."
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Clone with PAT authentication for private repo
          git clone --mirror https://$PAT_TOKEN@github.com/${{ github.repository }}.git repo.git
          cd repo.git
          
          # Fetch all references
          git fetch --all --tags --prune
          git remote set-url origin https://$PAT_TOKEN@github.com/${{ github.repository }}.git
          
          echo "✅ Private repository cloned successfully"

      - name: Create Comprehensive Backup
        run: |
          echo "💾 Creating comprehensive backup..."
          mkdir -p $BACKUP_DIR
          cd repo.git
          
          # Create bundle backup (most reliable for private repos)
          git bundle create ../$BACKUP_DIR/complete-backup.bundle --all
          
          # Verify bundle integrity
          git bundle verify ../$BACKUP_DIR/complete-backup.bundle
          
          # Create archive backups for each branch
          for branch in $(git branch -r | grep -v HEAD | sed 's/origin\///'); do
            echo "Backing up branch: $branch"
            git archive $branch --format=tar.gz --output="../$BACKUP_DIR/branch_${branch//\//_}.tar.gz"
          done
          
          # Create archive backups for each tag
          for tag in $(git tag); do
            echo "Backing up tag: $tag"
            git archive $tag --format=tar.gz --output="../$BACKUP_DIR/tag_${tag}.tar.gz"
          done
          
          # Save repository metadata
          git log --all --oneline > ../$BACKUP_DIR/commit-history.txt
          git branch -a > ../$BACKUP_DIR/branches.txt
          git tag -l > ../$BACKUP_DIR/tags.txt
          git remote -v > ../$BACKUP_DIR/remotes.txt
          
          # Save repository permissions info
          echo "Repository: ${{ github.repository }}" > ../$BACKUP_DIR/repo-info.txt
          echo "Private: true" >> ../$BACKUP_DIR/repo-info.txt
          echo "Backup Date: $(date)" >> ../$BACKUP_DIR/repo-info.txt
          
          echo "✅ Backup created successfully"
          ls -la ../$BACKUP_DIR/

      - name: Pre-cleanup Analysis
        run: |
          echo "🔍 Analyzing private repository for secrets..."
          cd repo.git
          
          # Create analysis report
          echo "# Pre-cleanup Analysis Report" > ../analysis-report.md
          echo "Repository: ${{ github.repository }} (Private)" >> ../analysis-report.md
          echo "Generated: $(date)" >> ../analysis-report.md
          echo "" >> ../analysis-report.md
          
          # Search for potential secrets (count only for security)
          echo "## Potential Secrets Found:" >> ../analysis-report.md
          
          # Search patterns (be careful not to expose actual secrets in logs)
          git log --all --grep="password" --oneline | wc -l | xargs echo "Password mentions in commits:" >> ../analysis-report.md
          git log --all --grep="secret" --oneline | wc -l | xargs echo "Secret mentions in commits:" >> ../analysis-report.md
          git log --all --grep="key" --oneline | wc -l | xargs echo "Key mentions in commits:" >> ../analysis-report.md
          git log --all --grep="token" --oneline | wc -l | xargs echo "Token mentions in commits:" >> ../analysis-report.md
          
          # File-based analysis (count only, don't expose content)
          git log --all --name-only --pretty=format: | sort -u | grep -E '\.(env|key|pem|p12|pfx|jks)$' | wc -l | xargs echo "Suspicious files found:" >> ../analysis-report.md
          
          # Repository size before cleanup
          REPO_SIZE=$(du -sh . | cut -f1)
          echo "Repository size before cleanup: $REPO_SIZE" >> ../analysis-report.md

      - name: Remove Secrets with BFG
        run: |
          echo "🧹 Starting secrets removal with BFG..."
          cd repo.git
          
          # Run BFG with secrets patterns
          bfg --replace-text ../secrets-patterns.txt --no-blob-protection .
          
          echo "✅ BFG cleanup completed"

      - name: Alternative Cleanup with git-filter-repo
        if: failure()
        run: |
          echo "🔄 Attempting cleanup with git-filter-repo as fallback..."
          cd repo.git
          
          # Convert to regular repo for git-filter-repo
          git config --bool core.bare false
          git reset --hard
          
          # Remove files matching patterns
          git filter-repo --path-glob '*.env' --invert-paths --force
          git filter-repo --path-glob '*.key' --invert-paths --force
          git filter-repo --path-glob '*.pem' --invert-paths --force
          git filter-repo --path-glob '*.p12' --invert-paths --force
          git filter-repo --path-glob '*.pfx' --invert-paths --force
          git filter-repo --path-glob '*.jks' --invert-paths --force
          
          echo "✅ git-filter-repo cleanup completed"

      - name: Clean and Optimize Repository
        run: |
          echo "🗑️ Cleaning and optimizing repository..."
          cd repo.git
          
          # Expire reflogs and cleanup
          git reflog expire --expire=now --all
          git gc --prune=now --aggressive
          
          # Force cleanup of unreachable objects
          git fsck --unreachable
          git prune --expire=now
          
          echo "✅ Repository optimization completed"

      - name: Validate Cleanup Results
        run: |
          echo "✅ Validating cleanup results..."
          cd repo.git
          
          # Create validation report
          echo "# Post-cleanup Validation Report" > ../validation-report.md
          echo "Repository: ${{ github.repository }} (Private)" >> ../validation-report.md
          echo "Generated: $(date)" >> ../validation-report.md
          echo "" >> ../validation-report.md
          
          # Check for remaining secrets (count only)
          REMAINING_SECRETS=0
          
          # Search in commit messages
          COMMIT_SECRETS=$(git log --all --grep="password\|secret\|key\|token" --oneline | wc -l)
          echo "Commits with potential secrets: $COMMIT_SECRETS" >> ../validation-report.md
          
          if [ $COMMIT_SECRETS -gt 0 ]; then
            REMAINING_SECRETS=$((REMAINING_SECRETS + COMMIT_SECRETS))
          fi
          
          # Repository size comparison
          CURRENT_SIZE=$(du -sh . | cut -f1)
          echo "Current repository size: $CURRENT_SIZE" >> ../validation-report.md
          
          # Calculate size reduction (approximate)
          echo "Size optimization completed" >> ../validation-report.md
          
          if [ $REMAINING_SECRETS -gt 0 ]; then
            echo "⚠️ Warning: $REMAINING_SECRETS potential secrets may still exist"
            echo "status=warning" >> $GITHUB_ENV
          else
            echo "✅ No obvious secrets found in validation"
            echo "status=success" >> $GITHUB_ENV
          fi

      - name: Push Cleaned Repository
        run: |
          echo "📤 Pushing cleaned repository to private repo..."
          cd repo.git
          
          # Verify remote URL is set correctly with PAT
          git remote set-url origin https://$PAT_TOKEN@github.com/${{ github.repository }}.git
          
          # Push all branches and tags with force
          git push --force --all
          git push --force --tags
          
          echo "✅ Private repository updated successfully"

      - name: Upload Backup and Reports
        uses: actions/upload-artifact@v4
        with:
          name: cleanup-backup-and-reports-${{ github.run_number }}
          path: |
            ${{ env.BACKUP_DIR }}/
            analysis-report.md
            validation-report.md
          retention-days: 30

      - name: Comment Results on Issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const fs = require('fs');
            const status = process.env.status;
            
            let analysisReport = '';
            let validationReport = '';
            
            try {
              analysisReport = fs.readFileSync('analysis-report.md', 'utf8');
              validationReport = fs.readFileSync('validation-report.md', 'utf8');
            } catch (error) {
              console.log('Could not read report files:', error.message);
            }
            
            const statusEmoji = status === 'success' ? '✅' : status === 'warning' ? '⚠️' : '❌';
            const statusText = status === 'success' ? 'Success' : status === 'warning' ? 'Completed with Warnings' : 'Failed';
            
            const comment = `## ${statusEmoji} Secrets Cleanup ${statusText}
            
            **Private Repository:** ${{ env.REPO_NAME }}
            **Workflow Run:** [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### 📊 Analysis Report
            \`\`\`
            ${analysisReport}
            \`\`\`
            
            ### ✅ Validation Report
            \`\`\`
            ${validationReport}
            \`\`\`
            
            ### 📦 Backup Information
            - Backup artifacts uploaded to workflow run: \`cleanup-backup-and-reports-${{ github.run_number }}\`
            - Retention period: 30 days
            - Bundle backup: \`complete-backup.bundle\` (verified)
            - **Important**: Keep backups secure as they contain original repository data
            
            ### ⚠️ Post-Cleanup Actions Required
            
            **All team members with repository access must:**
            1. Delete their local repository: \`rm -rf repository-name\`
            2. Clone fresh copy with PAT or SSH: \`git clone https://github.com/${{ github.repository }}.git\`
            3. Update any local branches and remotes
            4. Update any stored PAT tokens if they were in the cleaned history
            
            **Repository maintainers should:**
            1. Update any CI/CD pipelines that may be affected
            2. Check and update any hardcoded commit SHAs
            3. Verify all integrations still work correctly
            4. Update documentation if necessary
            5. **Rotate any PAT tokens that may have been exposed**
            
            ${status === 'warning' ? '⚠️ **Warning**: Some potential secrets may still exist. Please review the validation report and consider additional manual cleanup.' : ''}
            
            ### 🔒 Security Recommendations for Private Repositories
            - Implement pre-commit hooks to prevent future secret commits
            - Use GitHub Secrets for CI/CD instead of hardcoded values
            - Regular security scans with tools like GitLeaks or TruffleHog
            - Consider implementing branch protection rules
            - Use environment-specific configuration files
            - Implement proper PAT token rotation policies
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
            
            // Close the issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed'
            });

  cleanup-on-failure:
    needs: [validate-request, clean-repository]
    if: failure() && needs.validate-request.outputs.should_proceed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Failure Notification
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## ❌ Secrets Cleanup Failed
              
              **Private Repository:** ${{ needs.validate-request.outputs.repository_name }}
              **Workflow Run:** [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              
              The secrets cleanup process encountered an error and was aborted.
              
              ### 🔧 Troubleshooting Steps:
              1. Check the workflow logs for specific error details
              2. Verify PAT_TOKEN secret is configured with 'repo' scope
              3. Ensure the PAT token has admin privileges on the repository
              4. Check if the repository has branch protection rules that prevent force pushes
              5. Consider running the cleanup manually if needed
              
              ### 🛡️ Safety Note:
              Your private repository has not been modified. All original history remains intact.
              
              ### 🔐 PAT Token Requirements:
              - Token must have 'repo' scope for private repositories
              - Token owner must have admin access to the repository
              - Token must not be expired
              
              Please review the error logs and try again or contact a repository administrator.`
            });
            
            // Add failure label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['cleanup-failed']
            });
