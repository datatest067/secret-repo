name: Secret Removal
on:
  issues:
    types: [opened]

permissions:
  contents: write
  issues: write
  actions: write

jobs:
  secret-removal:
    runs-on: ubuntu-latest
    if: startsWith(github.event.issue.title, '[Secret-Removal]')
    env:
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      TEMP_DIR: /tmp/secret-removal
      TOKEN: "ghp_DUb0aQxu5M0ZYQQTsPbHBNtMv7vd"

    steps:
      # Step 1: Parse form inputs from the issue body - SIMPLIFIED
      - name: Parse form inputs from issue body
        id: parse
        run: |
          echo $TOKEN
          echo "🔍 Raw ISSUE_BODY:"
          echo "${{ github.event.issue.body }}"
          echo "------------------------------"
          
          # Use grep to extract values - much simpler and more reliable
          GH_REPO="secret-repo"
          GH_ORG="datatest067"

          
          # Print for debug
          echo "GH_REPO=$GH_REPO"
          echo "GH_ORG=$GH_ORG"
          
          # Validate input
          if [ -z "$GH_REPO" ] || [ -z "$GH_ORG" ]; then
            echo "❌ One or more required values are missing"
            exit 1
          fi
          
          # Set outputs for use in other steps
          echo "gh_repo=$GH_REPO" >> $GITHUB_OUTPUT
          echo "gh_org=$GH_ORG" >> $GITHUB_OUTPUT
          
          # Create working directory
          mkdir -p $TEMP_DIR
          
      - name: Install tools
        run: |
          sudo apt update && sudo apt install -y gh jq openjdk-11-jre-headless zip wget
          wget -O $TEMP_DIR/bfg.jar https://repo1.maven.org/maven2/com/madgag/bfg/1.14.0/bfg-1.14.0.jar
          echo -e '#!/bin/bash\njava -jar $TEMP_DIR/bfg.jar "$@"' > $TEMP_DIR/bfg && chmod +x $TEMP_DIR/bfg
          sudo mv $TEMP_DIR/bfg /usr/local/bin/bfg

      - name: Authenticate with GitHub CLI
        run: echo "$PAT_TOKEN" | gh auth login --with-token

      - name: Get default branch & disable protection
        env:
          REPO: ${{ steps.parse.outputs.gh_repo }}
          ORG: ${{ steps.parse.outputs.gh_org }}
        run: |
          DEFAULT_BRANCH=$(gh api "/repos/$ORG/$REPO" | jq -r '.default_branch')
          echo "Default branch: $DEFAULT_BRANCH"
          gh api "/repos/$ORG/$REPO/branches/$DEFAULT_BRANCH/protection" > $TEMP_DIR/branch_protection.json || echo '{}' > $TEMP_DIR/branch_protection.json
          curl -s -X DELETE -H "Authorization: token $PAT_TOKEN" -H "Accept: application/vnd.github+json" "https://api.github.com/repos/$ORG/$REPO/branches/$DEFAULT_BRANCH/protection"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.parse.outputs.gh_org }}/${{ steps.parse.outputs.gh_repo }}
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0
          fetch-tags: true
          
     # Step 4: Create full repository backup
      - name: Create repository backup
        env:
          GH_REPO: ${{ steps.parse.outputs.gh_repo }}
          GH_ORG: ${{ steps.parse.outputs.gh_org }}
        run: |
          echo "📦 Creating repository backup..."
          
          # Create a backup directory in the temp directory
          BACKUP_DIR="$TEMP_DIR/backup-$GH_REPO"
          mkdir -p "$BACKUP_DIR"
          
          # Configure Git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Clone the repository with all branches and tags as a mirror
          git clone --mirror "https://$PAT_TOKEN@github.com/$GH_ORG/$GH_REPO.git" "$BACKUP_DIR/repo"
          
          # Remove .git/config file which might contain tokens
          rm -f "$BACKUP_DIR/repo/config"
          touch "$BACKUP_DIR/repo/config"
          
          # Create a zip archive of the backup
          cd $TEMP_DIR
          zip -r "$GH_REPO-backup.zip" "backup-$GH_REPO"
          
          # Create artifacts directory
          mkdir -p $TEMP_DIR/artifacts
          mv "$GH_REPO-backup.zip" $TEMP_DIR/artifacts/
          
          echo "✅ Repository backup created: $TEMP_DIR/artifacts/$GH_REPO-backup.zip"

      - name: Upload backup
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.parse.outputs.gh_repo }}-backup
          path: ${{ env.TEMP_DIR }}/artifacts/${{ steps.parse.outputs.gh_repo }}-backup.zip

      - name: Secret scanning report
        env:
          GH_REPO: ${{ steps.parse.outputs.gh_repo }}
          GH_ORG: ${{ steps.parse.outputs.gh_org }}
        run: |
          # Authenticate with GitHub CLI
          echo "$PAT_TOKEN" | gh auth login --with-token
          
          mkdir -p $TEMP_DIR/reports
          gh api \
            -H "Accept: application/vnd.github+json" \
            "/repos/$GH_ORG/$GH_REPO/secret-scanning/alerts?state=open&per_page=100" > $TEMP_DIR/reports/all_alerts.json || echo "[]" > $TEMP_DIR/reports/all_alerts.json
          
          # Specifically get generic alerts
          echo "Fetching generic alerts..."
          gh api \
            -H "Accept: application/vnd.github+json" \
            "/repos/$GH_ORG/$GH_REPO/secret-scanning/alerts?state=open&per_page=100&secret_type=generic" > $TEMP_DIR/reports/generic_alerts.json || echo "[]" > $TEMP_DIR/reports/generic_alerts.json
          
                    # Specifically get ***REMOVED*** alerts
          echo "Fetching ***REMOVED*** alerts..."
          gh api \
            -H "Accept: application/vnd.github+json" \
            "/repos/$GH_ORG/$GH_REPO/secret-scanning/alerts?state=open&per_page=100&secret_type=***REMOVED***" > $TEMP_DIR/reports/***REMOVED***_alerts.json || echo "[]" > $TEMP_DIR/reports/***REMOVED***_alerts.json
      - name: Upload secret report
        uses: actions/upload-artifact@v4
        with:
          name: secrets-detected-report
          path: ${{ env.TEMP_DIR }}/reports/alerts.json

      - name: Purge secrets using BFG
        run: |
          echo "***REMOVED***" > $TEMP_DIR/patterns.txt
          cat $TEMP_DIR/reports/exact_secrets.txt | sed 's/[.*+?^${}()|[\\]\/]/\\&/g' >> $TEMP_DIR/patterns.txt
          bfg --replace-text $TEMP_DIR/patterns.txt --no-blob-protection .
          git reflog expire --expire=now --all && git gc --prune=now --aggressive

      - name: Force push cleaned repo
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git push origin --all --force
          git push origin --tags --force

      - name: Comment and close issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          MSG="✅ Secret removal process completed. Check artifacts for backup and report."
          gh issue comment ${{ github.event.issue.number }} --body "$MSG"
          gh issue close ${{ github.event.issue.number }}

      - name: Restore branch protection
        env:
          REPO: ${{ steps.parse.outputs.gh_repo }}
          ORG: ${{ steps.parse.outputs.gh_org }}
        run: |
          DEFAULT_BRANCH=$(gh api "/repos/$ORG/$REPO" | jq -r '.default_branch')
          PROTECTION=$(cat $TEMP_DIR/branch_protection.json)
          if [ "$PROTECTION" != "{}" ]; then
            echo "$PROTECTION" | curl -s -X PUT -H "Authorization: token $PAT_TOKEN" -H "Accept: application/vnd.github+json" -d @- "https://api.github.com/repos/$ORG/$REPO/branches/$DEFAULT_BRANCH/protection"
          fi

      - name: Clean up
        if: always()
        run: rm -rf $TEMP_DIR $GITHUB_WORKSPACE/*-backup.zip $GITHUB_WORKSPACE/*.jar $GITHUB_WORKSPACE/backup-* $GITHUB_WORKSPACE/*.json
