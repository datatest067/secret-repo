name: Purge Secrets on PR

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  purge-secrets:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository (all history, all refs)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Backup repository (all refs)
        run: |
          git bundle create repo-backup.bundle --all
          gh release create "backup-$(date +%Y%m%d%H%M%S)" repo-backup.bundle --title "Pre-purge backup"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install git-filter-repo
        run: |
          pip install git-filter-repo

      - name: Clean working directory
        run: |
          git clean -xfd

      - name: Remove secrets from history
        run: |
          # Example: Remove a file named 'secrets.txt' from all history
          # To remove a string, create a file 'replacements.txt' with lines like:
          # SECRET_STRING==>REMOVED
          # and use: --replace-text replacements.txt
          git filter-repo --force --path secrets.txt --invert-paths
          # Uncomment and customize the next line for string replacement:
          # git filter-repo --force --replace-text replacements.txt

      - name: Force-push all refs
        run: |
          git push --force --all
          git push --force --tags

      - name: Validate cleaned repository
        run: |
          # Example: Check that the secret file is gone
          if git rev-list --all | xargs git grep 'SECRET_STRING'; then
            echo "Secret still present!" && exit 1
          else
            echo "Secret successfully purged."
          fi

      - name: Comment on PR
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "Purge complete. Backup created as a release. Please verify the repository. All branches and tags were processed."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
